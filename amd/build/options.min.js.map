{"version":3,"file":"options.min.js","sources":["../src/options.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Tiny Panopto LTI Video Options helper.\n *\n * @module     tiny_panoptoltibutton/options\n * @copyright  2023 Panopto\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getPluginOptionName} from 'editor_tiny/options';\nimport {pluginName} from './common';\n\n// Helper variables for the option names.\nconst courseid = getPluginOptionName(pluginName, \"courseid\");\nconst tool = getPluginOptionName(pluginName, \"tool\");\nconst wwwroot = getPluginOptionName(pluginName, \"wwwroot\");\nconst contentitempath = getPluginOptionName(pluginName, \"contentitempath\");\nconst resourcebase = getPluginOptionName(pluginName, \"resourcebase\");\nconst panoptoltibuttondescription = getPluginOptionName(\n    pluginName,\n    \"panoptoltibuttondescription\"\n);\nconst panoptoltibuttonlongdescription = getPluginOptionName(\n    pluginName,\n    \"panoptoltibuttonlongdescription\"\n);\nconst unprovisionederror = getPluginOptionName(\n    pluginName,\n    \"unprovisionederror\"\n);\n\n/**\n * Options registration function.\n *\n * @param {tinyMCE} editor\n */\nexport const register = (editor) => {\n    const registerOption = editor.options.register;\n\n    // For each option, register it with the editor.\n    registerOption(courseid, {\n        processor: \"string\",\n    });\n    registerOption(tool, {\n        processor: \"object\",\n    });\n    registerOption(wwwroot, {\n        processor: \"string\",\n    });\n    registerOption(contentitempath, {\n        processor: \"string\",\n    });\n    registerOption(resourcebase, {\n        processor: \"string\",\n    });\n    registerOption(panoptoltibuttondescription, {\n        processor: \"string\",\n    });\n    registerOption(panoptoltibuttonlongdescription, {\n        processor: \"string\",\n    });\n    registerOption(unprovisionederror, {\n        processor: \"string\",\n    });\n};\n\n/**\n * Fetch the courseid value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the courseid option\n */\nexport const getCourseId = (editor) => editor.options.get(courseid);\n\n/**\n * Fetch the tool value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the tool option\n */\nexport const getTool = (editor) => editor.options.get(tool);\n\n/**\n * Fetch the wwwroot value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the wwwroot option\n */\nexport const getWwwroot = (editor) => editor.options.get(wwwroot);\n\n/**\n * Fetch the contentitempath value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the contentitempath option\n */\nexport const getContentItemPath = (editor) => editor.options.get(contentitempath);\n\n/**\n * Fetch the resourcebase value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the resourcebase option\n */\nexport const getResourceBase = (editor) => editor.options.get(resourcebase);\n\n/**\n * Fetch the panoptoltibuttondescription value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the panoptoltibuttondescription option\n */\nexport const getPanoptoLtiButtonDescription = (editor) =>\n    editor.options.get(panoptoltibuttondescription);\n\n/**\n * Fetch the panoptoltibuttonlongdescription value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the panoptoltibuttonlongdescription option\n */\nexport const getPanoptoLtiButtonLongDescription = (editor) =>\n    editor.options.get(panoptoltibuttonlongdescription);\n\n/**\n * Fetch the unprovisionederror value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the unprovisionederror option\n */\nexport const getUnprovisionedError = (editor) =>\n    editor.options.get(unprovisionederror);\n"],"names":["courseid","pluginName","tool","wwwroot","contentitempath","resourcebase","panoptoltibuttondescription","panoptoltibuttonlongdescription","unprovisionederror","editor","registerOption","options","register","processor","get"],"mappings":";;;;;;;;MA2BMA,UAAW,gCAAoBC,mBAAY,YAC3CC,MAAO,gCAAoBD,mBAAY,QACvCE,SAAU,gCAAoBF,mBAAY,WAC1CG,iBAAkB,gCAAoBH,mBAAY,mBAClDI,cAAe,gCAAoBJ,mBAAY,gBAC/CK,6BAA8B,gCAChCL,mBACA,+BAEEM,iCAAkC,gCACpCN,mBACA,mCAEEO,oBAAqB,gCACvBP,mBACA,wCAQqBQ,eACfC,eAAiBD,OAAOE,QAAQC,SAGtCF,eAAeV,SAAU,CACrBa,UAAW,WAEfH,eAAeR,KAAM,CACjBW,UAAW,WAEfH,eAAeP,QAAS,CACpBU,UAAW,WAEfH,eAAeN,gBAAiB,CAC5BS,UAAW,WAEfH,eAAeL,aAAc,CACzBQ,UAAW,WAEfH,eAAeJ,4BAA6B,CACxCO,UAAW,WAEfH,eAAeH,gCAAiC,CAC5CM,UAAW,WAEfH,eAAeF,mBAAoB,CAC/BK,UAAW,iCAUSJ,QAAWA,OAAOE,QAAQG,IAAId,2BAQlCS,QAAWA,OAAOE,QAAQG,IAAIZ,0BAQ3BO,QAAWA,OAAOE,QAAQG,IAAIX,qCAQtBM,QAAWA,OAAOE,QAAQG,IAAIV,0CAQjCK,QAAWA,OAAOE,QAAQG,IAAIT,sDAQfI,QAC3CA,OAAOE,QAAQG,IAAIR,yEAQ4BG,QAC/CA,OAAOE,QAAQG,IAAIP,gEAQeE,QAClCA,OAAOE,QAAQG,IAAIN"}